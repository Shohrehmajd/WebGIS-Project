import {
  Projection_default,
  addCoordinateTransforms,
  addEquivalentProjections,
  addProjection,
  createSafeCoordinateTransform,
  get,
  get2
} from "./chunk-SEC36PIR.js";
import "./chunk-MKQMUJ6R.js";
import "./chunk-XH2VUHOC.js";
import "./chunk-5RHQVMYD.js";
import "./chunk-3IXZBSVG.js";
import "./chunk-DC5AMYBS.js";

// node_modules/ol/proj/proj4.js
var registered = null;
function isRegistered() {
  return !!registered;
}
function unregister() {
  registered = null;
}
function register(proj4) {
  registered = proj4;
  const projCodes = Object.keys(proj4.defs);
  const len = projCodes.length;
  let i, j;
  for (i = 0; i < len; ++i) {
    const code = projCodes[i];
    if (!get2(code)) {
      const def = proj4.defs(code);
      let units = (
        /** @type {import("./Units.js").Units} */
        def.units
      );
      if (!units && def.projName === "longlat") {
        units = "degrees";
      }
      addProjection(
        new Projection_default({
          code,
          axisOrientation: def.axis,
          metersPerUnit: def.to_meter,
          units
        })
      );
    }
  }
  for (i = 0; i < len; ++i) {
    const code1 = projCodes[i];
    const proj1 = get2(code1);
    for (j = 0; j < len; ++j) {
      const code2 = projCodes[j];
      const proj2 = get2(code2);
      if (!get(code1, code2)) {
        if (proj4.defs[code1] === proj4.defs[code2]) {
          addEquivalentProjections([proj1, proj2]);
        } else {
          const transform = proj4(code1, code2);
          addCoordinateTransforms(
            proj1,
            proj2,
            createSafeCoordinateTransform(proj1, proj2, transform.forward),
            createSafeCoordinateTransform(proj2, proj1, transform.inverse)
          );
        }
      }
    }
  }
}
var epsgLookup = async function(code) {
  const response = await fetch(`https://epsg.io/${code}.proj4`);
  if (!response.ok) {
    throw new Error(`Unexpected response from epsg.io: ${response.status}`);
  }
  return response.text();
};
function setEPSGLookup(func) {
  epsgLookup = func;
}
function getEPSGLookup() {
  return epsgLookup;
}
async function fromEPSGCode(code) {
  if (typeof code === "string") {
    code = parseInt(code.split(":").pop(), 10);
  }
  const proj4 = registered;
  if (!proj4) {
    throw new Error("Proj4 must be registered first with register(proj4)");
  }
  const epsgCode = "EPSG:" + code;
  if (proj4.defs(epsgCode)) {
    return get2(epsgCode);
  }
  proj4.defs(epsgCode, await epsgLookup(code));
  register(proj4);
  return get2(epsgCode);
}
function epsgLookupMapTiler(key) {
  return async function(code) {
    const response = await fetch(
      `https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`
    );
    if (!response.ok) {
      throw new Error(
        `Unexpected response from maptiler.com: ${response.status}`
      );
    }
    return response.json().then((json) => {
      var _a, _b, _c, _d;
      const results = json["results"];
      if ((results == null ? void 0 : results.length) > 0) {
        const result = results.filter(
          (r) => {
            var _a2, _b2;
            return ((_a2 = r["id"]) == null ? void 0 : _a2["authority"]) === "EPSG" && ((_b2 = r["id"]) == null ? void 0 : _b2["code"]) === code;
          }
        )[0];
        if (result) {
          const transforms = result["transformations"];
          if ((transforms == null ? void 0 : transforms.length) > 0) {
            const defaultTransform = result["default_transformation"];
            if (transforms.filter(
              (t) => {
                var _a2, _b2, _c2;
                return ((_a2 = t["id"]) == null ? void 0 : _a2["authority"]) === (defaultTransform == null ? void 0 : defaultTransform["authority"]) && ((_b2 = t["id"]) == null ? void 0 : _b2["code"]) === (defaultTransform == null ? void 0 : defaultTransform["code"]) && ((_c2 = t["grids"]) == null ? void 0 : _c2.length) === 0;
              }
            ).length > 0) {
              return (_a = result["exports"]) == null ? void 0 : _a["proj4"];
            }
            const transform = (_c = (_b = transforms.filter(
              (t) => {
                var _a2, _b2, _c2;
                return ((_a2 = t["grids"]) == null ? void 0 : _a2.length) === 0 && ((_b2 = t["target_crs"]) == null ? void 0 : _b2["authority"]) === "EPSG" && ((_c2 = t["target_crs"]) == null ? void 0 : _c2["code"]) === 4326 && t["deprecated"] === false && t["usable"] === true;
              }
            ).sort((t1, t2) => t1["accuracy"] - t2["accuracy"])[0]) == null ? void 0 : _b["exports"]) == null ? void 0 : _c["proj4"];
            if (transform) {
              return transform;
            }
          }
          return (_d = result["exports"]) == null ? void 0 : _d["proj4"];
        }
      }
    });
  };
}
export {
  epsgLookupMapTiler,
  fromEPSGCode,
  getEPSGLookup,
  isRegistered,
  register,
  setEPSGLookup,
  unregister
};
//# sourceMappingURL=ol_proj_proj4__js.js.map
