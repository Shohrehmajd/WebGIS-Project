{
  "version": 3,
  "sources": ["../../ol/control/ScaleLine.js"],
  "sourcesContent": ["/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n * For cartesian measurements of the scaleline, you need to set the\n * `getPointResolution` method of your projection to simply return the input\n * value, e.g. `projection.setGetPointResolution(r => r);`\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n    this.un;\n\n    const className =\n      options.className !== undefined\n        ? options.className\n        : options.bar\n          ? 'ol-scale-bar'\n          : 'ol-scale-line';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.maxWidth_ = options.maxWidth;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n\n    this.setUnits(options.units || 'metric');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(\n      projection,\n      viewState.resolution,\n      center,\n      pointResolutionUnits,\n    );\n\n    const minWidth =\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\n\n    const maxWidth =\n      this.maxWidth_ !== undefined\n        ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI\n        : undefined;\n\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 1e-6) {\n        suffix = 'nm';\n        pointResolution *= 1e9;\n      } else if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      throw new Error('Invalid units');\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount, previousWidth, previousDecimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n    const html = this.scaleBar_\n      ? this.createScaleBar(width, count, suffix)\n      : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale =\n      resolutionScale < 1\n        ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'\n        : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n    for (let i = 0; i < steps; ++i) {\n      const cls =\n        i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push(\n        '<div>' +\n          '<div ' +\n          `class=\"ol-scale-singlebar ${cls}\" ` +\n          `style=\"width: ${stepWidth}px;\"` +\n          '>' +\n          '</div>' +\n          this.createMarker('relative') +\n          // render text every second step, except when only 2 steps\n          (i % 2 === 0 || steps === 2\n            ? this.createStepText(i, width, false, scale, suffix)\n            : '') +\n          '</div>',\n      );\n    }\n    // render text at the end\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n\n    const scaleBarText = this.scaleBarText_\n      ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` +\n        mapScale +\n        '</div>'\n      : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-marker\" ' +\n      `style=\"position: ${position}; top: ${top}px;\"` +\n      '></div>'\n    );\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length =\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-text\" ' +\n      'style=\"' +\n      `margin-left: ${margin}px;` +\n      `text-align: ${i === 0 ? 'left' : 'center'};` +\n      `min-width: ${minWidth}px;` +\n      `left: ${isLast ? width + 'px' : 'unset'};` +\n      '\">' +\n      lengthString +\n      '</div>'\n    );\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(\n      this.viewState_.projection,\n      this.viewState_.resolution,\n      this.viewState_.center,\n      'm',\n    );\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\n\nexport default ScaleLine;\n"],
  "mappings": "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",
  "names": []
}
